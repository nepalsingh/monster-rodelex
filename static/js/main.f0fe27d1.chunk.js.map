{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","searchChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAIaA,EAAO,SAAAC,GAAK,OACzB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,YACnE,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCHTC,G,MAAW,SAAAR,GAEpB,OAAO,qBAAKC,UAAU,YAAf,SAEHD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNhBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBACAZ,UAAW,SACXa,KAAM,SACNC,YAAcH,EACdI,SAAWH,MCqCAI,G,wDAzCb,aAAe,IAAD,8BACZ,gBAaFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEX,SAAUoB,S,oBAO3C,WAAU,IAAD,EAC0BC,KAAKN,MAA9Bf,EADD,EACCA,SAAUY,EADX,EACWA,YACZU,EAAmBtB,EAASuB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQG,KAAK2B,cAAcC,SAASb,EAAYY,kBAGlD,OACA,sBAAKhC,UAAU,MAAf,UACA,kDACE,cAAC,EAAD,CACEW,YAAc,kBACdC,aAAgBiB,KAAKZ,eAEzB,cAAC,EAAD,CAAUT,SAAWsB,W,GAhCPI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f0fe27d1.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n<div className=\"card-container\">\n    <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"monster\"></img>\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n</div>\n);","import React from 'react';\nimport { Card} from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList = props => {\n    \n    return <div className=\"card-list\">\n    {\n        props.monsters.map(monster => (\n          <Card key={monster.id} monster={monster} />\n        ))\n      } \n    </div>;\n};\n","import React from 'react';\n\nimport './serach-box.styles.css'\n\nexport const SearchBox = ({placeHolder, handleChange}) => (\n\n    <input \n    className= 'search'\n    type= 'search' \n    placeholder= {placeHolder}\n    onChange= {handleChange}\n    /> \n)","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx'\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\nimport './App.css'\n\nclass App extends Component { \n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n  }\n}\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}));\n  }\n\n  searchChange = (e) => {\n    this.setState({ searchField: e.target.value}) \n  }\n\n  render() {\n    const { monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return ( \n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n      <SearchBox \n        placeHolder = 'Search Monsters'\n        handleChange = {this.searchChange}\n      />\n    <CardList monsters={ filteredMonsters} /> \n    </div>\n     )\n\n  }\n\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}